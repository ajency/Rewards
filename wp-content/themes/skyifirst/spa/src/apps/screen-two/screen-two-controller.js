// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['extm', 'src/apps/screen-two/screen-two-view'], function(Extm, ScreenTwoView) {
  var ScreenTwoController, tagsArray;
  tagsArray = "";
  ScreenTwoController = (function(_super) {
    __extends(ScreenTwoController, _super);

    function ScreenTwoController() {
      this._unitCountSelected = __bind(this._unitCountSelected, this);
      this.showViews = __bind(this.showViews, this);
      this.showUpdateBuilding = __bind(this.showUpdateBuilding, this);
      return ScreenTwoController.__super__.constructor.apply(this, arguments);
    }

    ScreenTwoController.prototype.initialize = function() {
      this.Collection = this._getUnitsCountCollection();
      this.layout = new ScreenTwoView.ScreenTwoLayout({
        collection: this.Collection[0],
        buildingColl: this.Collection[0],
        uintVariantId: this.Collection[9],
        uintVariantIdArray: this.Collection[10],
        unitVariants: this.Collection[8],
        views: this.Collection[13],
        facings: this.Collection[14],
        Oviews: this.Collection[11],
        Ofacings: this.Collection[12],
        terrace: this.Collection[15],
        terraceID: this.Collection[16],
        templateHelpers: {
          selection: this.Collection[2],
          unitsCount: this.Collection[3],
          unittypes: this.Collection[4],
          high: this.Collection[5],
          medium: this.Collection[6],
          low: this.Collection[7],
          unitVariants: this.Collection[8],
          views: this.Collection[11],
          facings: this.Collection[12],
          terrace: this.Collection[15],
          terraceID: this.Collection[16],
          AJAXURL: AJAXURL
        }
      });
      this.listenTo(this.layout, "show", this.showViews);
      this.listenTo(this.layout, "show:updated:building", this.showUpdateBuilding);
      this.listenTo(this.layout, 'unit:variants:selected', this.showUpdateBuildings);
      this.listenTo(this.layout, 'unit:count:selected', this._unitCountSelected);
      return this.show(this.layout);
    };

    ScreenTwoController.prototype.showUpdateBuildings = function() {
      this.Collection = this._getUnitsCountCollection();
      this.layout = new ScreenTwoView.ScreenTwoLayout({
        collection: this.Collection[0],
        buildingColl: this.Collection[0],
        uintVariantId: this.Collection[9],
        uintVariantIdArray: this.Collection[10],
        views: this.Collection[13],
        facings: this.Collection[14],
        Oviews: this.Collection[11],
        Ofacings: this.Collection[12],
        unitVariants: this.Collection[8],
        terrace: this.Collection[15],
        terraceID: this.Collection[16],
        templateHelpers: {
          selection: this.Collection[2],
          unitsCount: this.Collection[3],
          unittypes: this.Collection[4],
          high: this.Collection[5],
          medium: this.Collection[6],
          low: this.Collection[7],
          unitVariants: this.Collection[8],
          views: this.Collection[11],
          facings: this.Collection[12],
          terrace: this.Collection[15],
          terraceID: this.Collection[16],
          AJAXURL: AJAXURL
        }
      });
      this.listenTo(this.layout, "show", this.showViews);
      this.listenTo(this.layout, "show:updated:building", this.showUpdateBuilding);
      this.listenTo(this.layout, 'unit:variants:selected', this.showUpdateBuildings);
      this.listenTo(this.layout, 'unit:count:selected', this._unitCountSelected);
      return this.show(this.layout);
    };

    ScreenTwoController.prototype.showUpdateBuilding = function(id) {
      var buidlingValue, building, itemview1, itemview2, masterbuilding, scr;
      this.Collection = this._getUnitsCountCollection(id);
      itemview1 = new ScreenTwoView.UnitTypeChildView({
        collection: this.Collection[0]
      });
      itemview2 = new ScreenTwoView.UnitTypeView({
        collection: this.Collection[1]
      });
      this.layout.buildingRegion.$el.empty();
      this.layout.unitRegion.$el.empty();
      this.layout.buildingRegion.$el.append(itemview1.render().el);
      this.layout.unitRegion.$el.append(itemview2.render().el);
      scr = document.createElement('script');
      scr.src = '../wp-content/themes/Homes/js/src/preload/main2.js';
      document.body.appendChild(scr);
      building = this.Collection[0].toArray();
      buidlingValue = _.first(building);
      masterbuilding = App.master.building;
      masterbuilding.each(function(index) {
        return $("#highlighttower" + index.get('id')).attr('class', 'overlay');
      });
      return $("#highlighttower" + buidlingValue.get('id')).attr('class', 'overlay highlight');
    };

    ScreenTwoController.prototype.showViews = function() {
      this.buildingCollection = this.Collection[0];
      this.unitCollection = this.Collection[0];
      this.showBuildingRegion(this.buildingCollection);
      return this.showUnitRegion(this.unitCollection);
    };

    ScreenTwoController.prototype.showBuildingRegion = function(buildingCollection) {
      var itemview1;
      itemview1 = this.getView(buildingCollection);
      return this.layout.buildingRegion.show(itemview1);
    };

    ScreenTwoController.prototype.showUnitRegion = function(unitCollection) {
      var itemview2;
      console.log(unitCollection);
      itemview2 = this.getUnitsView(unitCollection);
      return this.layout.unitRegion.show(itemview2);
    };

    ScreenTwoController.prototype.getView = function(buildingCollection) {
      return new ScreenTwoView.UnitTypeChildView({
        collection: buildingCollection
      });
    };

    ScreenTwoController.prototype.getUnitsView = function(unitCollection) {
      return new ScreenTwoView.UnitTypeView({
        collection: unitCollection
      });
    };

    ScreenTwoController.prototype._unitCountSelected = function() {
      return App.navigate("screen-three", {
        trigger: true
      });
    };

    ScreenTwoController.prototype._getUnitsCountCollection = function(paramid) {
      var Countunits, MainCollection, ModelActualArr, arrayvalue, buildingArray, buildingArrayModel, buildingCollection, buildingUnits, buildingsactual, buildingvalue, capability, facingID, facingModels, facingtemp, facingtemp1, flag, floorCollection, floorCollectionCur, floorCollectionmaster, floorCollunits, floorCollunits1, floorUnitsArray, flooruniqUnitvariant, floorunitvariant, highLength, hnewarr, i, index, itemCollection, j, key, keycheck, lnewarr, mainArray, mainnewarr, mainunique, mainunitTypeArray, mainunitTypeArray1, mainunitsTypeArray, mnewarr, modelArr, modelIdArr, myArray, myArray1, param, paramkey, status, status_onhold, temp, templateArr, templateString, tempunitvarinat, terraceID, terraceModels, terracetemp, terracetemp1, uniqUnitvariant, uniqfacings, uniqterrace, uniqviews, unitColl, unitVariantID, unitVariantModels, units, units1, unitsactual, unitslen, unitslen1, unitvariant, unitvarinatColl, usermodel, viewID, viewModels, viewtemp, viewtemp1;
      if (paramid == null) {
        paramid = {};
      }
      buildingArray = Array();
      buildingArrayModel = Array();
      unitColl = Array();
      templateArr = [];
      mainunitTypeArray = [];
      mainnewarr = [];
      lnewarr = [];
      mnewarr = [];
      hnewarr = [];
      mainunique = {};
      myArray1 = [];
      MainCollection = new Backbone.Model();
      status = App.currentStore.status.findWhere({
        'name': 'Available'
      });
      status_onhold = App.currentStore.status.findWhere({
        'name': 'On Hold'
      });
      key = _.isEmpty(paramid);
      if (key === true) {
        units = _.filter(App.currentStore.unit.toArray(), function(num) {
          return parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'));
        });
      } else {
        units = _.filter(App.currentStore.unit.toArray(), function(num) {
          return parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'));
        });
      }
      Countunits = _.filter(App.currentStore.unit.toArray(), function(num) {
        return parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'));
      });
      param = {};
      paramkey = {};
      flag = 0;
      mainunitsTypeArray = [];
      mainArray = [];
      param = {};
      templateString = "";
      paramkey = {};
      flag = 0;
      floorUnitsArray = [];
      myArray = [];
      $.map(App.defaults, function(value, index) {
        if (value !== 'All') {
          if (index !== 'unitVariant') {
            myArray.push({
              key: index,
              value: value
            });
          }
          if (index !== 'facing' && index !== 'terrace' && index !== 'view') {
            return myArray1.push({
              key: index,
              value: value
            });
          }
        }
      });
      unitslen = _.filter(App.currentStore.unit.toArray(), function(num) {
        return parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'));
      });
      unitslen1 = App.master.unit.toArray();
      $.each(unitslen1, function(index, value1) {
        var floorArray, floorstring;
        if (App.defaults['floor'] !== 'All') {
          floorstring = App.defaults['floor'];
          floorArray = floorstring.split(',');
          return $.each(floorArray, function(index, value) {
            if (value1.get('floor') === parseInt(value)) {
              return floorUnitsArray.push(value1);
            }
          });
        }
      });
      if (App.defaults['floor'] === "All") {
        floorUnitsArray = unitslen1;
      }
      floorCollunits = [];
      $.each(floorUnitsArray, function(index, value1) {
        flag = 0;
        $.each(myArray, function(index, value) {
          var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
          paramKey = {};
          paramKey[value.key] = value.value;
          if (value.key === 'budget') {
            buildingModel = App.master.building.findWhere({
              'id': value1.get('building')
            });
            floorRise = buildingModel.get('floorrise');
            floorRiseValue = floorRise[value1.get('floor')];
            unitVariantmodel = App.master.unit_variant.findWhere({
              'id': value1.get('unitVariant')
            });
            unitPrice = value1.get('unitPrice');
            budget_arr = value.value.split(' ');
            budget_price = budget_arr[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
              return flag++;
            }
          } else if (value.key !== 'floor') {
            tempnew = [];
            if (value.key === 'view' || value.key === 'apartment_views') {
              tempnew = [];
              value.key = 'apartment_views';
              tempnew = value1.get(value.key);
              if (tempnew !== "") {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            } else if (value.key === 'facing') {
              tempnew = [];
              tempnew = value1.get(value.key);
              if (tempnew.length !== 0) {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            }
            temp = [];
            temp.push(value.value);
            tempstring = temp.join(',');
            initvariant = tempstring.split(',').map(function(item) {
              return parseInt(item);
            });
            if (initvariant.length >= 1) {
              _results = [];
              for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                element = initvariant[_i];
                if (value1.get(value.key) === parseInt(element)) {
                  _results.push(flag++);
                } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                  _results.push(flag++);
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              if (value1.get(value.key) === parseInt(value.value)) {
                return flag++;
              }
            }
          }
        });
        if (flag >= myArray.length) {
          return floorCollunits.push(value1);
        }
      });
      floorCollunits1 = [];
      $.each(floorUnitsArray, function(index, value1) {
        flag = 0;
        $.each(myArray1, function(index, value) {
          var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
          paramKey = {};
          paramKey[value.key] = value.value;
          if (value.key === 'budget') {
            buildingModel = App.master.building.findWhere({
              'id': value1.get('building')
            });
            floorRise = buildingModel.get('floorrise');
            floorRiseValue = floorRise[value1.get('floor')];
            unitVariantmodel = App.master.unit_variant.findWhere({
              'id': value1.get('unitVariant')
            });
            unitPrice = value1.get('unitPrice');
            budget_arr = value.value.split(' ');
            budget_price = budget_arr[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
              return flag++;
            }
          } else if (value.key !== 'floor') {
            tempnew = [];
            if (value.key === 'view' || value.key === 'apartment_views') {
              tempnew = [];
              value.key = 'apartment_views';
              tempnew = value1.get(value.key);
              if (tempnew !== "") {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            } else if (value.key === 'facing') {
              tempnew = [];
              tempnew = value1.get(value.key);
              if (tempnew.length !== 0) {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            }
            temp = [];
            temp.push(value.value);
            tempstring = temp.join(',');
            initvariant = tempstring.split(',').map(function(item) {
              return parseInt(item);
            });
            if (initvariant.length >= 1) {
              _results = [];
              for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                element = initvariant[_i];
                if (value1.get(value.key) === parseInt(element)) {
                  _results.push(flag++);
                } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                  _results.push(flag++);
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              if (value1.get(value.key) === parseInt(value.value)) {
                return flag++;
              }
            }
          }
        });
        if (flag === myArray1.length) {
          if (value1.get('unitType') !== 14 && value1.get('unitType') !== 16) {
            return floorCollunits1.push(value1);
          }
        }
      });
      tempunitvarinat = [];
      uniqUnitvariant = [];
      floorCollection = new Backbone.Collection(floorCollunits);
      $.each(App.master.unit.toArray(), function(index, value) {
        if (value.get('unitType') !== 14 && value.get('unitType') !== 16) {
          return tempunitvarinat.push(value);
        }
      });
      unitvarinatColl = new Backbone.Collection(tempunitvarinat);
      unitvariant = unitvarinatColl.pluck("unitVariant");
      uniqUnitvariant = _.uniq(unitvariant);
      floorunitvariant = floorCollection.pluck("unitVariant");
      flooruniqUnitvariant = _.uniq(floorunitvariant);
      unitVariantModels = [];
      unitVariantID = [];
      viewModels = [];
      viewID = [];
      viewtemp = [];
      viewtemp1 = [];
      facingModels = [];
      facingID = [];
      facingtemp = [];
      facingtemp1 = [];
      terraceModels = [];
      terraceID = [];
      terracetemp = [];
      terracetemp1 = [];
      usermodel = new Backbone.Model(USER);
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_special_filters', capability) >= 0) {
        floorCollectionmaster = App.master.unit;
        floorCollectionmaster.each(function(item) {
          if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
            if (item.get('apartment_views') !== "" && item.get('apartment_views').length !== 0) {
              $.merge(viewtemp, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0 && item.get('facing') !== "") {
              $.merge(facingtemp, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return terracetemp.push(item.get('terrace'));
            }
          }
        });
        floorCollectionCur = new Backbone.Collection(floorCollunits1);
        floorCollectionCur.each(function(item) {
          if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
            if (item.get('apartment_views') !== "" && item.get('apartment_views').length !== 0) {
              $.merge(viewtemp1, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0 && item.get('facing') !== "") {
              $.merge(facingtemp1, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return terracetemp1.push(item.get('terrace'));
            }
          }
        });
        viewtemp = viewtemp.map(function(item) {
          return parseInt(item);
        });
        facingtemp = facingtemp.map(function(item) {
          return parseInt(item);
        });
        terracetemp = terracetemp.map(function(item) {
          return parseInt(item);
        });
        uniqviews = _.uniq(viewtemp);
        uniqfacings = _.uniq(facingtemp);
        uniqterrace = _.uniq(terracetemp);
        viewtemp1 = viewtemp1.map(function(item) {
          return parseInt(item);
        });
        viewtemp1 = _.uniq(viewtemp1);
        facingtemp1 = facingtemp1.map(function(item) {
          return parseInt(item);
        });
        facingtemp1 = _.uniq(facingtemp1);
        terracetemp1 = terracetemp1.map(function(item) {
          return parseInt(item);
        });
        terracetemp1 = _.uniq(terracetemp1);
        $.each(uniqviews, function(index, value) {
          var checked, classname, count, disabled, viewModel;
          viewModel = App.master.view.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), viewtemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            var apartment;
            if (parseInt(val.get('status')) === parseInt(status.get('id')) || parseInt(val.get('status')) === parseInt(status_onhold.get('id'))) {
              apartment = val.get('apartment_views');
              if (val.get('apartment_views') !== "" && val.get('apartment_views').length !== 0) {
                apartment = apartment.map(function(item) {
                  return parseInt(item);
                });
                if ($.inArray(parseInt(value), apartment) >= 0) {
                  return $.merge(count, val.get('apartment_views'));
                }
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            viewID.push(parseInt(viewModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return viewModels.push({
            id: viewModel.get('id'),
            name: viewModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
        $.each(uniqfacings, function(index, value) {
          var checked, classname, count, disabled, facingModel;
          facingModel = App.master.facings.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), facingtemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            var facing;
            if (parseInt(val.get('status')) === parseInt(status.get('id')) || parseInt(val.get('status')) === parseInt(status_onhold.get('id'))) {
              facing = val.get('facing');
              facing = facing.map(function(item) {
                return parseInt(item);
              });
              if ($.inArray(parseInt(value), facing) >= 0) {
                return $.merge(count, val.get('facing'));
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            facingID.push(parseInt(facingModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return facingModels.push({
            id: facingModel.get('id'),
            name: facingModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
        $.each(uniqterrace, function(index, value) {
          var checked, classname, count, disabled, terraceModel;
          terraceModel = App.master.terrace.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), terracetemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            if (parseInt(val.get('status')) === parseInt(status.get('id')) || parseInt(val.get('status')) === parseInt(status_onhold.get('id'))) {
              if (parseInt(value) === parseInt(val.get('terrace'))) {
                return count.push(val);
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            terraceID.push(parseInt(terraceModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return terraceModels.push({
            id: parseInt(terraceModel.get('id')),
            name: terraceModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
      }
      $.each(uniqUnitvariant, function(index, value) {
        var classname, count, filter, selected, unitVarinatModel, unittypemodel;
        unitVarinatModel = App.master.unit_variant.findWhere({
          id: value
        });
        count = _.filter(floorCollection.toArray(), function(num) {
          return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && num.get('unitVariant') === value;
        });
        key = $.inArray(value, flooruniqUnitvariant);
        if (App.defaults['unitType'] !== "All") {
          unittypemodel = App.master.unit_type.findWhere({
            id: parseInt(App.defaults['unitType'])
          });
          filter = unittypemodel.get('name') + ' apartments';
        } else if (App.defaults['budget'] !== "All") {
          filter = 'Apartments within ' + App.defaults['budget'];
        }
        selected = "";
        if (count.length !== 0 && key >= 0) {
          classname = 'filtered';
          selected = 'selected';
          unitVariantID.push(parseInt(unitVarinatModel.get('id')));
        } else if (count.length === 0 && key >= 0) {
          classname = 'sold';
        } else {
          classname = 'other';
        }
        return unitVariantModels.push({
          id: unitVarinatModel.get('id'),
          name: unitVarinatModel.get('name'),
          sellablearea: unitVarinatModel.get('sellablearea'),
          count: count.length,
          classname: classname,
          selected: selected,
          filter: filter
        });
      });
      unitVariantModels.sort(function(a, b) {
        return a.id - b.id;
      });
      unitVariantID.sort(function(a, b) {
        return a - b;
      });
      mainunitTypeArray1 = [];
      units1 = _.filter(App.master.unit.toArray(), function(num) {
        return parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'));
      });
      $.each(units1, function(index, value) {
        var unitType;
        if (buildingArray.indexOf(value.get('building')) === -1) {
          buildingArray.push(value.get('building'));
        }
        unitType = App.master.unit_type.findWhere({
          id: value.get('unitType')
        });
        return mainunitTypeArray1.push({
          id: unitType.get('id'),
          name: unitType.get('name')
        });
      });
      $.each(units, function(index, value) {
        var maxcoll, unitType;
        maxcoll = Array();
        unitType = App.master.unit_type.findWhere({
          id: value.get('unitType')
        });
        return mainunitTypeArray.push({
          id: unitType.get('id'),
          name: unitType.get('name')
        });
      });
      $.each(mainunitTypeArray1, function(key, item) {
        var classname, count;
        if (!mainunique[item.id]) {
          if (item.id !== 14 && item.id !== 16) {
            count = _.filter(App.currentStore.unit.toArray(), function(num) {
              return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && num.get('unitType') === item.id;
            });
            count = App.currentStore.unit.where({
              unitType: item.id,
              'status': status.get('id')
            });
            if (parseInt(item.id) === 9) {
              classname = 'twoBHK';
            } else if (parseInt(item.id) === 19) {
              classname = 'oneBHK';
            } else {
              classname = 'threeBHK';
            }
            mainnewarr.push({
              id: item.id,
              name: item.name,
              classname: classname,
              count: count
            });
            return mainunique[item.id] = item;
          }
        }
      });
      buildingUnits = [];
      $.each(buildingArray, function(index, value) {
        var availableunits, buildingModel, buildingid, data, disablehigh, disablelow, disablemedium, flag1, flag11, flag2, flag3, flag33, flag4, flag5, flag55, floorriserange, floors, hclassname, hcount, hfloorvalue, highArray, high_max_val, high_min_val, hunique, hunitTypeArray, itemCollection, lclassname, lcount, lfloorvalue, lowArray, low_max_val, low_min_val, lunique, lunitTypeArray, mclassname, mcount, mediumArray, medium_max_val, medium_min_val, mfloorvalue, munique, munitTypeArray, newarr, newunits, totalfloorcollection, totalunits, uniqFloors, unique, unitTypeArray, variantsDataValues, viewmodels;
        buildingid = value;
        unitTypeArray = Array();
        newarr = [];
        unique = {};
        viewmodels = [];
        lunitTypeArray = [];
        lnewarr = [];
        lunique = {};
        munitTypeArray = [];
        mnewarr = [];
        munique = {};
        hunitTypeArray = [];
        hnewarr = [];
        hunique = {};
        lcount = [];
        mcount = [];
        hcount = [];
        mainArray = Array();
        lclassname = "";
        mclassname = "";
        hclassname = "";
        totalunits = App.currentStore.unit.where({
          'building': value
        });
        buildingModel = App.master.building.findWhere({
          id: buildingid
        });
        floorriserange = buildingModel.get('floorriserange');
        variantsDataValues = [];
        data = [];
        flag = 0;
        flag1 = 0;
        flag11 = 0;
        $.each(mainunitTypeArray, function(key, item) {
          var count;
          if (!lunique[item.id]) {
            lunitTypeArray = [];
            count = _.filter(App.currentStore.unit.toArray(), function(num) {
              return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && parseInt(num.get('building')) === parseInt(buildingid) && num.get('unitType') === item.id;
            });
            $.each(count, function(index, value) {
              if ((value.get('floor') >= parseInt(floorriserange[0].start) && value.get('floor') <= parseInt(floorriserange[0].end)) && item.id === value.get('unitType')) {
                return lunitTypeArray.push(value);
              }
            });
            $.each(lunitTypeArray, function(index, value) {
              if (value.get('unitType') === 9) {
                flag = 1;
              }
              if (value.get('unitType') === 10) {
                flag1 = 1;
              }
              if (value.get('unitType') === 19) {
                return flag11 = 1;
              }
            });
            if (parseInt(flag11) === 1) {
              lclassname = 'oneBHK';
            }
            if (parseInt(flag) === 1) {
              lclassname = 'twoBHK';
            }
            if (parseInt(flag1) === 1) {
              lclassname = 'threeBHK';
            }
            if (parseInt(flag) === 1 && parseInt(flag1) === 1 && parseInt(flag11)) {
              lclassname = 'multiBHK';
            }
            lnewarr.push({
              id: item.id,
              name: item.name,
              count: lunitTypeArray.length,
              classname: lclassname
            });
            return lunique[item.id] = item;
          }
        });
        flag2 = 0;
        flag3 = 0;
        flag33 = 0;
        $.each(mainunitTypeArray, function(key, item) {
          var count;
          if (!munique[item.id]) {
            munitTypeArray = [];
            count = _.filter(App.currentStore.unit.toArray(), function(num) {
              return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && parseInt(num.get('building')) === parseInt(buildingid) && num.get('unitType') === item.id;
            });
            $.each(count, function(index, value) {
              if ((value.get('floor') >= parseInt(floorriserange[1].start) && value.get('floor') <= parseInt(floorriserange[1].end)) && item.id === value.get('unitType')) {
                return munitTypeArray.push(value);
              }
            });
            $.each(munitTypeArray, function(index, value) {
              if (value.get('unitType') === 9) {
                flag2 = 1;
              }
              if (value.get('unitType') === 10) {
                flag3 = 1;
              }
              if (value.get('unitType') === 19) {
                return flag33 = 1;
              }
            });
            if (parseInt(flag2) === 1) {
              mclassname = 'twoBHK';
            }
            if (parseInt(flag33) === 1) {
              mclassname = 'oneBHK';
            }
            if (parseInt(flag3) === 1) {
              mclassname = 'threeBHK';
            }
            if (parseInt(flag2) === 1 && parseInt(flag3) === 1 && parseInt(flag33) === 1) {
              mclassname = 'multiBHK';
            }
            mnewarr.push({
              id: item.id,
              name: item.name,
              count: munitTypeArray.length,
              classname: mclassname
            });
            return munique[item.id] = item;
          }
        });
        flag4 = 0;
        flag5 = 0;
        flag55 = 0;
        $.each(mainunitTypeArray, function(key, item) {
          var count;
          if (!hunique[item.id]) {
            hunitTypeArray = [];
            count = _.filter(App.currentStore.unit.toArray(), function(num) {
              return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && parseInt(num.get('building')) === parseInt(buildingid) && num.get('unitType') === item.id;
            });
            $.each(count, function(index, value) {
              if ((value.get('floor') >= parseInt(floorriserange[2].start) && value.get('floor') <= parseInt(floorriserange[2].end)) && item.id === value.get('unitType')) {
                return hunitTypeArray.push(value);
              }
            });
            $.each(hunitTypeArray, function(index, value) {
              if (value.get('unitType') === 9) {
                flag4 = 1;
              }
              if (value.get('unitType') === 10) {
                flag5 = 1;
              }
              if (value.get('unitType') === 19) {
                return flag55 = 1;
              }
            });
            if (parseInt(flag4) === 1) {
              hclassname = 'twoBHK';
            }
            if (parseInt(flag5) === 1) {
              hclassname = 'threeBHK';
            }
            if (parseInt(flag55) === 1) {
              hclassname = 'oneBHK';
            }
            if (parseInt(flag4) === 1 && parseInt(flag5) === 1 && parseInt(flag55)) {
              hclassname = 'multiBHK';
            }
            hnewarr.push({
              id: item.id,
              name: item.name,
              count: hunitTypeArray.length,
              classname: hclassname
            });
            return hunique[item.id] = item;
          }
        });
        availableunits = _.filter(App.currentStore.unit.toArray(), function(num) {
          return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && num.get('building') === value;
        });
        totalfloorcollection = new Backbone.Collection(totalunits);
        floors = totalfloorcollection.pluck("floor");
        uniqFloors = _.uniq(floors);
        newunits = _.filter(App.currentStore.unit.toArray(), function(num) {
          return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && num.get('building') === value;
        });
        buildingUnits.push({
          id: buildingid,
          count: newunits.length,
          name: 'tower' + buildingid
        });
        lowArray = Array();
        mediumArray = Array();
        highArray = Array();
        mainArray = Array();
        unitTypeArray = [];
        $.each(newunits, function(index, value) {
          var unitType;
          if (value.get('unitType') !== 14 && value.get('unitType') !== 16) {
            if (value.get('floor') >= parseInt(floorriserange[0].start) && value.get('floor') <= parseInt(floorriserange[0].end)) {
              lowArray.push(value.get('id'));
            }
            if (value.get('floor') >= parseInt(floorriserange[1].start) && value.get('floor') <= parseInt(floorriserange[1].end)) {
              mediumArray.push(value.get('id'));
            }
            if (value.get('floor') >= parseInt(floorriserange[2].start) && value.get('floor') <= parseInt(floorriserange[2].end)) {
              highArray.push(value.get('id'));
            }
          }
          unitType = App.master.unit_type.findWhere({
            id: value.get('unitType')
          });
          return unitTypeArray.push({
            id: unitType.get('id'),
            name: unitType.get('name')
          });
        });
        $.each(unitTypeArray, function(key, item) {
          var classname, count;
          if (!unique[item.id]) {
            count = _.filter(App.currentStore.unit.toArray(), function(num) {
              return (parseInt(num.get('status')) === parseInt(status.get('id')) || parseInt(num.get('status')) === parseInt(status_onhold.get('id'))) && parseInt(num.get('building')) === parseInt(buildingid) && num.get('unitType') === item.id;
            });
            if (parseInt(item.id) === 9) {
              classname = 'twoBHK m-l-20';
            } else {
              classname = 'oneBHK';
            }
            newarr.push({
              id: item.id,
              name: item.name,
              count: count.length,
              classname: classname
            });
            return unique[item.id] = item;
          }
        });
        low_max_val = 0;
        low_min_val = 0;
        medium_max_val = 0;
        medium_min_val = 0;
        high_min_val = 0;
        high_max_val = 0;
        lfloorvalue = "";
        mfloorvalue = "";
        hfloorvalue = "";
        disablehigh = "other";
        disablemedium = "other";
        disablelow = "other";
        lfloorvalue = 'Floors ' + floorriserange[0].start + '-' + floorriserange[0].end;
        mfloorvalue = 'Floors ' + floorriserange[1].start + '-' + floorriserange[1].end;
        hfloorvalue = 'Floors ' + floorriserange[2].start + '-' + floorriserange[2].end;
        $.each(lowArray, function(index, value) {
          var max_coll, unitCollection, unitmodel, unittypemodel;
          disablelow = "";
          unitmodel = App.master.unit.findWhere({
            id: value
          });
          unittypemodel = App.master.unit_type.findWhere({
            id: unitmodel.get('unitType')
          });
          unitCollection = App.master.unit.where({
            unitType: unittypemodel.get('id')
          });
          max_coll = Array();
          $.each(unitCollection, function(index, value) {
            var variantmodel;
            variantmodel = App.master.unit_variant.findWhere({
              id: value.get('unitVariant')
            });
            return max_coll.push(variantmodel.get('sellablearea'));
          });
          low_max_val = Math.max.apply(Math, max_coll);
          return low_min_val = Math.min.apply(Math, max_coll);
        });
        $.each(mediumArray, function(index, value) {
          var max_coll, unitCollection, unitmodel, unittypemodel;
          disablemedium = "";
          unitmodel = App.master.unit.findWhere({
            id: value
          });
          unittypemodel = App.master.unit_type.findWhere({
            id: unitmodel.get('unitType')
          });
          munitTypeArray.push({
            id: unittypemodel.get('id'),
            name: unittypemodel.get('name')
          });
          unitCollection = App.master.unit.where({
            unitType: unittypemodel.get('id')
          });
          max_coll = Array();
          $.each(unitCollection, function(index, value) {
            var variantmodel;
            variantmodel = App.master.unit_variant.findWhere({
              id: value.get('unitVariant')
            });
            return max_coll.push(variantmodel.get('sellablearea'));
          });
          medium_max_val = Math.max.apply(Math, max_coll);
          return medium_min_val = Math.min.apply(Math, max_coll);
        });
        $.each(highArray, function(index, value) {
          var max_coll, unitCollection, unitmodel, unittypemodel;
          disablehigh = "";
          unitmodel = App.master.unit.findWhere({
            id: value
          });
          unittypemodel = App.master.unit_type.findWhere({
            id: unitmodel.get('unitType')
          });
          hunitTypeArray.push({
            id: unittypemodel.get('id'),
            name: unittypemodel.get('name')
          });
          unitCollection = App.master.unit.where({
            unitType: unittypemodel.get('id')
          });
          max_coll = Array();
          $.each(unitCollection, function(index, value) {
            var variantmodel;
            variantmodel = App.master.unit_variant.findWhere({
              id: value.get('unitVariant')
            });
            return max_coll.push(variantmodel.get('sellablearea'));
          });
          high_max_val = Math.max.apply(Math, max_coll);
          return high_min_val = Math.min.apply(Math, max_coll);
        });
        if (App.defaults['unitType'] !== 'All') {
          mainnewarr = [];
          hclassname = "";
          mclassname = "";
          lclassname = "";
        }
        mainArray.push({
          count: highArray.length,
          low_max_val: high_max_val,
          low_min_val: high_min_val,
          range: 'high',
          buildingid: buildingid,
          unittypes: hnewarr,
          classname: hclassname,
          rangetext: 'HIGHRISE',
          rangeNo: hfloorvalue,
          disable: disablehigh
        });
        mainArray.push({
          count: mediumArray.length,
          low_max_val: medium_max_val,
          low_min_val: medium_min_val,
          range: 'medium',
          buildingid: buildingid,
          unittypes: mnewarr,
          classname: mclassname,
          rangetext: 'MIDRISE',
          rangeNo: mfloorvalue,
          disable: disablemedium
        });
        mainArray.push({
          count: lowArray.length,
          low_max_val: low_max_val,
          low_min_val: low_min_val,
          range: 'low',
          buildingid: buildingid,
          unittypes: lnewarr,
          classname: lclassname,
          rangetext: 'LOWRISE',
          rangeNo: lfloorvalue,
          disable: disablelow
        });
        itemCollection = new Backbone.Collection(mainArray);
        buildingModel = App.master.building.findWhere({
          id: value
        });
        unitColl.push({
          id: buildingModel.get('id'),
          buildingname: buildingModel.get('name'),
          units: itemCollection,
          buildingid: buildingModel.get('id'),
          unittypes: newarr,
          availableunits: availableunits.length,
          totalunits: totalunits.length,
          totalfloors: uniqFloors.length,
          views: variantsDataValues
        });
        return buildingArrayModel.push(buildingModel);
      });
      mainArray = [];
      if (buildingUnits.length === 2) {
        buildingUnits.push({
          id: 100,
          count: 0,
          name: 'tower' + 100
        });
        mainArray.push({
          count: '---',
          low_max_val: 0,
          low_min_val: 0,
          range: 'high',
          buildingid: 100,
          unittypes: 0,
          classname: "",
          rangetext: 'HIGHRISE',
          rangeNo: 'Floors --'
        });
        mainArray.push({
          count: '---',
          low_max_val: 0,
          low_min_val: 0,
          range: 'medium',
          buildingid: 100,
          unittypes: 0,
          classname: "",
          rangetext: 'MIDRISE',
          rangeNo: 'Floors --'
        });
        mainArray.push({
          count: '---',
          low_max_val: 0,
          low_min_val: 0,
          range: 'low',
          buildingid: 100,
          unittypes: 0,
          classname: "",
          rangetext: 'LOWRISE',
          rangeNo: 'Floors --'
        });
        itemCollection = new Backbone.Collection(mainArray);
        unitColl.push({
          id: 101,
          buildingname: 'Random',
          units: itemCollection,
          buildingid: 100,
          unittypes: 0,
          availableunits: 0,
          totalunits: 0,
          totalfloors: 0,
          views: 0
        });
      }
      buildingvalue = _.max(buildingUnits, function(model) {
        return model.count;
      });
      buildingUnits.sort(function(a, b) {
        return a.id - b.id;
      });
      modelIdArr = [];
      modelArr = [];
      ModelActualArr = [];
      $.each(buildingUnits, function(index, value) {
        return modelIdArr.push(value.id);
      });
      key = _.isEmpty(paramid);
      if (key === true) {
        index = _.indexOf(modelIdArr, buildingvalue.id);
        modelArr.push(buildingvalue.id);
      } else {
        keycheck = _.findWhere(buildingUnits, {
          name: paramid
        });
        index = _.indexOf(modelIdArr, keycheck.id);
        modelArr.push(keycheck.id);
      }
      highLength = modelIdArr.length - index;
      i = index + 1;
      while (i < modelIdArr.length) {
        modelArr.push(modelIdArr[i]);
        i++;
      }
      j = 0;
      while (j < index) {
        modelArr.push(modelIdArr[j]);
        j++;
      }
      if (modelArr.length === 2) {
        arrayvalue = _.last(modelArr);
        modelArr.push(arrayvalue);
      }
      buildingsactual = [];
      unitsactual = [];
      buildingCollection = new Backbone.Collection(buildingArrayModel);
      units = new Backbone.Collection(unitColl);
      $.each(modelArr, function(index, value) {
        value = value;
        buildingsactual.push(buildingCollection.get(value));
        return unitsactual.push(units.get(value));
      });
      buildingCollection = new Backbone.Collection(buildingsactual);
      units = new Backbone.Collection(unitsactual);
      temp = [];
      $.each(buildingArray, function(index, value) {
        var buildingmodel;
        buildingmodel = App.master.building.findWhere({
          'id': parseInt(value)
        });
        units = App.currentStore.unit.where({
          'building': parseInt(value)
        });
        return temp.push({
          'id': value,
          'count': units.length,
          'name': buildingmodel.get('name')
        });
      });
      console.log(buildingCollection = new Backbone.Collection(temp));
      return [buildingCollection, units, templateString, Countunits.length, mainnewarr, hnewarr, mnewarr, lnewarr, unitVariantModels, unitVariantID, unitVariantID, viewModels, facingModels, viewID, facingID, terraceModels, terraceID];
    };

    return ScreenTwoController;

  })(Extm.RegionController);
  return msgbus.registerController('screen:two', ScreenTwoController);
});
